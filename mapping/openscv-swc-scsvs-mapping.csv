OpenSCV Index,OpenSCV Description,SWC ID,SWC Name,SCSVS Category,SCSVS Requirement
1.1.1 Unsafe Credit Transfer,"Known due to the DAO attack event, this vulnerability allows attackers to maliciously change balance via credit transfer calls that are allowed to take place before a previous call has been completed.",SWC-107,Reentrancy,Architecture and Design,V1.1: Verify that the contract has undergone threat modeling to identify and mitigate potential risks.
1.1.1 Unsafe Credit Transfer,"Known due to the DAO attack event, this vulnerability allows attackers to maliciously change balance via credit transfer calls that are allowed to take place before a previous call has been completed.",SWC-107,Reentrancy,Malicious Input Handling,V5.4: Verify that the contract checks return values for all external function calls.
1.1.1 Unsafe Credit Transfer,"Known due to the DAO attack event, this vulnerability allows attackers to maliciously change balance via credit transfer calls that are allowed to take place before a previous call has been completed.",SWC-107,Reentrancy,Business Logic,V10.1: Verify that business logic flows through sequential state-transitioning patterns rather than unstructured logic.
1.1.1 Unsafe Credit Transfer,"Known due to the DAO attack event, this vulnerability allows attackers to maliciously change balance via credit transfer calls that are allowed to take place before a previous call has been completed.",SWC-107,Reentrancy,External Interactions,V11.2: Verify that the contract applies the Checks-Effects-Interactions pattern where applicable.
1.1.1 Unsafe Credit Transfer,"Known due to the DAO attack event, this vulnerability allows attackers to maliciously change balance via credit transfer calls that are allowed to take place before a previous call has been completed.",SWC-107,Reentrancy,Known Attacks,V12.2: Verify that the contract has protection against reentrancy attacks.
1.1.2 Unsafe System State Changes,"This vulnerability is similar in nature to v1.1.1, with the main difference being the fact that there is no credit involved and, thus, no impact on users' funds.",SWC-107,Reentrancy,Architecture and Design,V1.1: Verify that the contract has undergone threat modeling to identify and mitigate potential risks.
1.1.2 Unsafe System State Changes,"This vulnerability is similar in nature to v1.1.1, with the main difference being the fact that there is no credit involved and, thus, no impact on users' funds.",SWC-107,Reentrancy,Malicious Input Handling,V5.4: Verify that the contract checks return values for all external function calls.
1.1.2 Unsafe System State Changes,"This vulnerability is similar in nature to v1.1.1, with the main difference being the fact that there is no credit involved and, thus, no impact on users' funds.",SWC-107,Reentrancy,Business Logic,V10.1: Verify that business logic flows through sequential state-transitioning patterns rather than unstructured logic.
1.1.2 Unsafe System State Changes,"This vulnerability is similar in nature to v1.1.1, with the main difference being the fact that there is no credit involved and, thus, no impact on users' funds.",SWC-107,Reentrancy,External Interactions,V11.2: Verify that the contract applies the Checks-Effects-Interactions pattern where applicable.
1.1.2 Unsafe System State Changes,"This vulnerability is similar in nature to v1.1.1, with the main difference being the fact that there is no credit involved and, thus, no impact on users' funds.",SWC-107,Reentrancy,Known Attacks,V12.2: Verify that the contract has protection against reentrancy attacks.
1.3.1 Improper Check of External Call Return Value,"This defect consists of an incorrect (or missing) verification of the returned value from the external execution of a contract.",SWC-104,Unchecked Call Return Value,Malicious Input Handling,V5.4: Verify that the contract checks return values for all external function calls.
1.3.1 Improper Check of External Call Return Value,"This defect consists of an incorrect (or missing) verification of the returned value from the external execution of a contract.",SWC-104,Unchecked Call Return Value,External Interactions,V11.1: Verify that external contract calls use appropriate safeguards.
1.3.2 Improper Exception Handling of External Calls,"In the case of this defect, the problem resides in the incorrect (or missing) handling of exceptional behavior thrown by a call.",SWC-113,DoS with Failed Call,Gas Usage & Limitations,V6.3: Verify that contract operations have considered gas price volatility.
1.3.2 Improper Exception Handling of External Calls,"In the case of this defect, the problem resides in the incorrect (or missing) handling of exceptional behavior thrown by a call.",SWC-113,DoS with Failed Call,External Interactions,V11.4: Verify that the contract implements mechanism to handle potential DoS vectors.
1.4 Improper locking during external calls,"A vulnerable contract uses a lock mechanism in an erroneous manner, which may cause deadlocks.",SWC-132,Unexpected Ether Balance,Token Standards Compliance,V7.1: Verify that contract implementations match token interface criteria.
1.4 Improper locking during external calls,"A vulnerable contract uses a lock mechanism in an erroneous manner, which may cause deadlocks.",SWC-132,Unexpected Ether Balance,Business Logic,V10.3: Verify that the business logic does not rely on exact Ether balance in the contract.
1.4 Improper locking during external calls,"A vulnerable contract uses a lock mechanism in an erroneous manner, which may cause deadlocks.",SWC-132,Unexpected Ether Balance,Known Attacks,V12.4: Verify that the contract has protection against oracle manipulation.
1.6 Delegatecall to Untrusted Callee,"The delegatecall allows a contract to dynamically load code from another contract, through a function call.",SWC-112,Delegatecall to Untrusted Callee,Malicious Input Handling,V5.3: Verify that low-level calls to external contracts are used appropriately.
1.6 Delegatecall to Untrusted Callee,"The delegatecall allows a contract to dynamically load code from another contract, through a function call.",SWC-112,Delegatecall to Untrusted Callee,External Interactions,V11.1: Verify that external contract calls use appropriate safeguards.
2.1.2 Improper Exception Handling in a Loop,"This vulnerability happens when a contract handles incorrectly an exception thrown within a loop.",SWC-113,DoS with Failed Call,Gas Usage & Limitations,V6.3: Verify that contract operations have considered gas price volatility.
2.1.2 Improper Exception Handling in a Loop,"This vulnerability happens when a contract handles incorrectly an exception thrown within a loop.",SWC-113,DoS with Failed Call,External Interactions,V11.4: Verify that the contract implements mechanism to handle potential DoS vectors.
2.1.3 Incorrect Revert Implementation in a Loop,"This is similar to v2.1.2 exception that the vulnerability is with the revert opcode",SWC-128,DoS With Block Gas Limit,Arithmetic,V4.4: Verify that the contract does not perform unbounded gas-consuming operations.
2.1.3 Incorrect Revert Implementation in a Loop,"This is similar to v2.1.2 exception that the vulnerability is with the revert opcode",SWC-128,DoS With Block Gas Limit,Gas Usage & Limitations,V6.2: Verify that gas limits are enforced for loops and that they are within acceptable bounds.
2.1.3 Incorrect Revert Implementation in a Loop,"This is similar to v2.1.2 exception that the vulnerability is with the revert opcode",SWC-128,DoS With Block Gas Limit,Known Attacks,V12.3: Verify that the contract has protection against flash loan attacks.
3.1 Improper Gas Requirements Checking,"This kind of vulnerability resides in the improper verification of the gas budget needed to execute a transaction.",SWC-126,Insufficient Gas Griefing,Gas Usage & Limitations,V6.1: Verify that the cost of executing different functions is known and documented.
3.2 Call with hardcoded gas amount,"This vulnerability comprises the use of a particular gas amount hardcoded as a parameter of a call instruction.",SWC-134,Message call with hardcoded gas amount,Token Standards Compliance,V7.2: Verify that token transfer methods adequately protect against potential Ether lost in transfers.
4.2 Unprotected Transfer Value,"This vulnerability happens due to the inadequate implementation of access control to transfer functions.",SWC-105,Unprotected Ether Withdrawal,Architecture and Design,V1.10: Verify the contract has a proper ownership management with clear and efficient transfer capabilities if required.
4.2 Unprotected Transfer Value,"This vulnerability happens due to the inadequate implementation of access control to transfer functions.",SWC-105,Unprotected Ether Withdrawal,Access Control,V2.1: Verify that the principle of least privilege exists - other contracts should only be able to access functions and data they require.
5.1 Bad Randomness,"Blockchain public ledgers are based on deterministic protocols. They do not provide inherent unpredictable sources of randomness.",SWC-120,Weak Sources of Randomness from Chain Attributes,Architecture and Design,V1.2: Verify that the business logic in smart contracts is consistent with the smart contract documentation and specification.
5.1 Bad Randomness,"Blockchain public ledgers are based on deterministic protocols. They do not provide inherent unpredictable sources of randomness.",SWC-120,Weak Sources of Randomness from Chain Attributes,Blockchain Data,V3.4: Verify that the contract does not use block parameters as a source of randomness.
5.2.1 Missing Constructor,"A constructor is a special function that sets the initialization state of the contract. Every contract should have a constructor.",SWC-118,Incorrect Constructor Name,Compiler & Deployment,V8.3: Verify that old compiler versions are not used if they have known bugs.
5.2.2 Wrong Constructor Name,"This vulnerability happens when the constructor function name is incorrect.",SWC-118,Incorrect Constructor Name,Compiler & Deployment,V8.3: Verify that old compiler versions are not used if they have known bugs.
5.2.4 Uninitialized Storage Variables,"This vulnerability happens when a storage variable is not initialized.",SWC-109,Uninitialized Storage Pointer,Compiler & Deployment,V8.2: Verify that contracts are deployed with the same compiler version and flags used in testing.
5.4.2 Wrong Selection of Guard Function,"This vulnerability occurs when the authentication function (modifier) used is incorrect.",SWC-115,Authorization through tx.origin,Architecture and Design,V1.10: Verify the contract has a proper ownership management with clear and efficient transfer capabilities if required.
5.4.2 Wrong Selection of Guard Function,"This vulnerability occurs when the authentication function (modifier) used is incorrect.",SWC-115,Authorization through tx.origin,Access Control,V2.2: Verify that the system enforces access control rules specified in a trusted contract and rejects by default.
5.4.3 Function Call with Wrong Arguments,"This vulnerability represents a function call that includes incorrect arguments.",SWC-123,Requirement Violation,Malicious Input Handling,V5.1: Verify that contract logic has considered and properly validates unexpected values and states.
5.5 Wrong class inheritance order,"When inheriting, the order matters. If contract A extends B and C, B will first be searched for the methods or variables. Only if not found, then C will be checked.",SWC-125,Incorrect Inheritance Order,Access Control,V2.4: Verify that the principle of deny by default exists whereby processes services functions or configurations are disabled by default.
5.6.2 Function return type mismatch,"This vulnerability happens when the type returned by the function is incompatible with the declared one.",SWC-123,Requirement Violation,Malicious Input Handling,V5.1: Verify that contract logic has considered and properly validates unexpected values and states.
5.7.2 No effect code execution,"This vulnerability is related to the presence of code which, when executed, is expected to produce an effect (for instance, change of state). However, it does not do that.",SWC-135,Code With No Effects,Code Clarity & Documentation,V9.1: Verify all code is clean relevant and has a clear logic.
5.7.3 Unused variables,"This vulnerability happens when there are variables defined in the contracts code that are never used.",SWC-131,Presence of unused variables,Code Clarity & Documentation,V9.1: Verify all code is clean relevant and has a clear logic.
5.8.1 Undetermined Program Version Prevalence,"The program is deployed and run on a blockchain network. The version of the program used at execution time depends on various causes, such as the one chosen by the compiler.",SWC-103,Floating Pragma,Compiler & Deployment,V8.1: Verify that a specific compiler version is defined in the contract.
5.8.2 Outdated Compiler Version,"This vulnerability happens when a deprecated or unsupported version of the compiler is used to compile the contract.",SWC-102,Outdated Compiler Version,Compiler & Deployment,V8.3: Verify that old compiler versions are not used if they have known bugs.
5.8.3 Use of Deprecated Functions,"This vulnerability happens when a function that has been discontinued or deprecated is used in the contract.",SWC-111,Use of Deprecated Solidity Functions,Code Clarity & Documentation,V9.3: Verify that the smart contract does not use deprecated or insecure code practices.
5.10.1 Wrong Function Modifier,"This vulnerability happens when a function has a wrong visibility modifier (i.e. private, public, external or internal).",SWC-100,Function Default Visibility,Code Clarity & Documentation,V9.2: Verify that all state variables functions and interfaces have appropriate visibility declarations.
5.10.3 Missing Visibility Modifier in Variable Declaration,"This vulnerability happens when a variable is declared without an explicit visibility modifier.",SWC-108,State Variable Default Visibility,Compiler & Deployment,V8.5: Verify that all state variables have appropriate visibility defined.
5.10.3 Missing Visibility Modifier in Variable Declaration,"This vulnerability happens when a variable is declared without an explicit visibility modifier.",SWC-108,State Variable Default Visibility,Code Clarity & Documentation,V9.2: Verify that all state variables functions and interfaces have appropriate visibility declarations.
5.12.1 Use of Same Variable or Function Name In Inherited Contract,"This vulnerability happens when a variable or function name in the current class also exists in a parent contract.",SWC-119,Shadowing State Variables,Code Clarity & Documentation,V9.2: Verify that all state variables functions and interfaces have appropriate visibility declarations.
5.13.2 Write to Arbitrary Storage Location,"This vulnerability happens when arbitrary data is written to storage.",SWC-124,Write to Arbitrary Storage Location,Malicious Input Handling,V5.2: Verify that input validation is enforced for all data from external sources.
5.15 Typographical Error,"This category includes lexical or typographical errors (i.e., a typo) that mislead other developers and may result in program errors.",SWC-129,Typographical Error,Arithmetic,V4.2: Verify that no precision loss is present within the contract.
6.1.1 Incorrect Use of Event Blockchain variables for Time,"Using block timestamp or block number to calculate time is problematic due to miners' manipulation.",SWC-116,Block values as a proxy for time,Blockchain Data,V3.3: Verify that timestamps are not used for critical contract logic.
6.1.2 Incorrect Function Call Order,"The incorrect call order of functions in a contract can lead to unwanted side-effects.",SWC-114,Transaction Order Dependence,Business Logic,V10.4: Verify that the contract logic accounts for front-running and transaction reordering attacks.
6.1.2 Incorrect Function Call Order,"The incorrect call order of functions in a contract can lead to unwanted side-effects.",SWC-114,Transaction Order Dependence,External Interactions,V11.5: Verify that the contract implements protection against front-running sandwich and monitoring attacks.
6.1.2 Incorrect Function Call Order,"The incorrect call order of functions in a contract can lead to unwanted side-effects.",SWC-114,Transaction Order Dependence,Known Attacks,V12.1: Verify that the contract has protection against replay attacks.
6.1.3 Improper Locking,"This vulnerability happens due to issues with locking mechanisms in the contract.",SWC-132,Unexpected Ether Balance,Token Standards Compliance,V7.1: Verify that contract implementations match token interface criteria.
6.1.3 Improper Locking,"This vulnerability happens due to issues with locking mechanisms in the contract.",SWC-132,Unexpected Ether Balance,Business Logic,V10.3: Verify that the business logic does not rely on exact Ether balance in the contract.
6.1.3 Improper Locking,"This vulnerability happens due to issues with locking mechanisms in the contract.",SWC-132,Unexpected Ether Balance,Known Attacks,V12.4: Verify that the contract has protection against oracle manipulation.
6.1.4 Transfer Pre-Condition Dependent on Transaction Order,"This vulnerability happens when the precondition for a transfer depends on the order of transactions.",SWC-114,Transaction Order Dependence,Business Logic,V10.4: Verify that the contract logic accounts for front-running and transaction reordering attacks.
6.1.4 Transfer Pre-Condition Dependent on Transaction Order,"This vulnerability happens when the precondition for a transfer depends on the order of transactions.",SWC-114,Transaction Order Dependence,External Interactions,V11.5: Verify that the contract implements protection against front-running sandwich and monitoring attacks.
6.1.4 Transfer Pre-Condition Dependent on Transaction Order,"This vulnerability happens when the precondition for a transfer depends on the order of transactions.",SWC-114,Transaction Order Dependence,Known Attacks,V12.1: Verify that the contract has protection against replay attacks.
6.1.5 Transfer Amount Depending on Transaction Order,"This vulnerability happens when the value of a transfer depends on the order of transactions.",SWC-114,Transaction Order Dependence,Business Logic,V10.4: Verify that the contract logic accounts for front-running and transaction reordering attacks.
6.1.5 Transfer Amount Depending on Transaction Order,"This vulnerability happens when the value of a transfer depends on the order of transactions.",SWC-114,Transaction Order Dependence,External Interactions,V11.5: Verify that the contract implements protection against front-running sandwich and monitoring attacks.
6.1.5 Transfer Amount Depending on Transaction Order,"This vulnerability happens when the value of a transfer depends on the order of transactions.",SWC-114,Transaction Order Dependence,Known Attacks,V12.1: Verify that the contract has protection against replay attacks.
6.1.6 Transfer Recipient Depending on Transaction Order,"This vulnerability happens when the recipient of a transfer depends on the order of transactions.",SWC-114,Transaction Order Dependence,Business Logic,V10.4: Verify that the contract logic accounts for front-running and transaction reordering attacks.
6.1.6 Transfer Recipient Depending on Transaction Order,"This vulnerability happens when the recipient of a transfer depends on the order of transactions.",SWC-114,Transaction Order Dependence,External Interactions,V11.5: Verify that the contract implements protection against front-running sandwich and monitoring attacks.
6.1.6 Transfer Recipient Depending on Transaction Order,"This vulnerability happens when the recipient of a transfer depends on the order of transactions.",SWC-114,Transaction Order Dependence,Known Attacks,V12.1: Verify that the contract has protection against replay attacks.
6.2.2 Extraneous Input Validation,"This vulnerability happens when the input validation performed is excessive or redundant.",SWC-123,Requirement Violation,Malicious Input Handling,V5.1: Verify that contract logic has considered and properly validates unexpected values and states.
7.1.1 Integer Underflow,"This vulnerability happens when a signed integer reaches a value below its lower limit.",SWC-101,Integer Overflow and Underflow,Arithmetic,V4.1: Verify that the contract uses established safe math libraries for arithmetic operations.
7.1.2 Integer Overflow,"This vulnerability happens when a signed integer exceeds the maximum value that can be represented.",SWC-101,Integer Overflow and Underflow,Arithmetic,V4.1: Verify that the contract uses established safe math libraries for arithmetic operations.
7.2.1 Divide by Zero,"This vulnerability happens when the divisor in a division operation becomes zero.",SWC-130,Right-To-Left-Override control character (U+202E),Malicious Input Handling,V5.1: Verify that contract logic has considered and properly validates unexpected values and states.
7.2.2 Integer Division,"This vulnerability happens due to issues with integer division, where the fractional part is truncated.",SWC-101,Integer Overflow and Underflow,Arithmetic,V4.1: Verify that the contract uses established safe math libraries for arithmetic operations.
7.3.1 Truncation Bugs,"This vulnerability happens when values are truncated due to type conversion.",SWC-101,Integer Overflow and Underflow,Arithmetic,V4.1: Verify that the contract uses established safe math libraries for arithmetic operations.
7.3.2 Signedness Bugs,"This vulnerability happens due to issues with signed and unsigned integers.",SWC-101,Integer Overflow and Underflow,Arithmetic,V4.1: Verify that the contract uses established safe math libraries for arithmetic operations.
8.1.1 Wrong Caller Identification,"This vulnerability happens when there is a wrong authentication mechanism to identify the caller.",SWC-115,Authorization through tx.origin,Architecture and Design,V1.10: Verify the contract has a proper ownership management with clear and efficient transfer capabilities if required.
8.1.1 Wrong Caller Identification,"This vulnerability happens when there is a wrong authentication mechanism to identify the caller.",SWC-115,Authorization through tx.origin,Access Control,V2.2: Verify that the system enforces access control rules specified in a trusted contract and rejects by default.
8.1.3 Missing verification for program termination,"This vulnerability happens when a contract terminates without proper verification.",SWC-106,Unprotected SELFDESTRUCT Instruction,Access Control,V2.4: Verify that the principle of deny by default exists whereby processes services functions or configurations are disabled by default.
8.2.1 Exposed private data,"This vulnerability happens when private data is exposed.",SWC-136,Unencrypted Private Data On-Chain,Access Control,V2.1: Verify that the principle of least privilege exists - other contracts should only be able to access functions and data they require.
8.3.1 Incorrect Verification of Cryptographic Signature,"This vulnerability happens when the signature verification mechanism is flawed.",SWC-122,Lack of Proper Signature Verification,Access Control,V2.12: Verify proper verification of signatures if they are used in the contract.
8.3.2 Improper Check against Signature Replay Attacks,"This vulnerability happens when the contract does not properly check against signature replay attacks.",SWC-121,Missing Protection against Signature Replay Attacks,Access Control,V2.12: Verify proper verification of signatures if they are used in the contract.
8.3.3 Improper authenticity check,"This vulnerability happens when the authenticity check is insufficient or incorrect.",SWC-122,Lack of Proper Signature Verification,Access Control,V2.12: Verify proper verification of signatures if they are used in the contract.
8.3.4 Incorrect Argument Encoding,"This vulnerability happens when the arguments for a function are incorrectly encoded.",SWC-133,Hash Collisions With Multiple Variable Length Arguments,Malicious Input Handling,V5.2: Verify that input validation is enforced for all data from external sources.