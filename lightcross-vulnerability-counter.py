import csv
import os
import re
import sys
from collections import defaultdict

def load_vulnerability_mapping(csv_file):
    mapping = {}
    with open(csv_file, 'r') as f:
        reader = csv.DictReader(f)
        for row in reader:
            vuln_name = row['Vulnerability name'].lower().strip()
            mapping[vuln_name] = {
                category: row[category].lower().strip() == 'true'
                for category in row.keys()
                if category not in ['Tools', 'Vulnerability name', 'Ignore']
            }
    return mapping

def categorize_vulnerability(vuln_name, mapping):
    vuln_name_lower = vuln_name.lower().strip()
    for mapped_vuln, categories in mapping.items():
        if mapped_vuln in vuln_name_lower:
            return [cat for cat, is_true in categories.items() if is_true]
    return ['Other']

vuln_results = defaultdict(lambda: defaultdict(int))
def parse_output_csv(csv_file, vulnerability_mapping):
    results = {
        'slither': defaultdict(int),
        'mythril': defaultdict(int),
        # 'file': defaultdict(str)
    }
    # results = defaultdict(lambda: defaultdict(lambda: defaultdict(int)))
    results = defaultdict(lambda: defaultdict(int))

    slither_list = []
    mythril_list = []
    with open(csv_file, 'r') as f:
        reader = csv.DictReader(f)
        for row in reader:
            file_with_lines = row['File']
            # Remove line numbers or ranges from the file name
            # file_base = re.sub(r'#L[\d\-]+', '', file_with_lines)
            file_base = re.sub(r'\.sol.*$', '.sol', file_with_lines)
            # print(file_base)
            tool = row['Tool'].lower().strip()
            # results[file_base][tool] = file_base
            if tool in ['slither', 'mythril']:
                if tool == 'slither':
                    vuln_name = row['Vulnerability'].strip()
                    slither_list.append(vuln_name)
                else: 
                    vuln_name = row['Vulnerability'].strip()
                    mythril_list.append(vuln_name)

                # categories = categorize_vulnerability(vuln_name, vulnerability_mapping)
                #
                # # print(tool)
                # # print(vuln_name)
                #
                # for category in categories:
                #     # results[file_base][category] += 1
                #     results[tool][category] += 1

                # if tool == 'slither':
                #     vuln_results[tool][category] = {'vuln': vuln_name}
                # else:
                #     vuln_results[tool][category] = {'vuln': vuln_name}

        unique_list = list(set(slither_list))
        print(unique_list)

        for slist in unique_list:
            categories = categorize_vulnerability(slist, vulnerability_mapping)

            for category in categories:
                results['slither'][category] += 1

        unique_list = list(set(mythril_list))
        print(unique_list)

        for mlist in unique_list:
            categories = categorize_vulnerability(mlist, vulnerability_mapping)

            for category in categories:
                results['mythril'][category] += 1

    return results

def process_folder(folder_path, vulnerability_mapping):
    total_results = {
        'slither': defaultdict(int),
        'mythril': defaultdict(int)
    }

    for filename in os.listdir(folder_path):
        if filename.startswith('output_'):
            file_path = os.path.join(folder_path, filename)
            results = parse_output_csv(file_path, vulnerability_mapping)
            
            for tool in ['slither', 'mythril']:
                for category, count in results[tool].items():
                    total_results[tool][category] += count

    return total_results

def main(folder_path):
    script_dir = os.path.dirname(os.path.abspath(__file__))
    mapping_file = os.path.join(script_dir, 'vulnerabilities_mapping.csv')
    
    vulnerability_mapping = load_vulnerability_mapping(mapping_file)
    results = process_folder(folder_path, vulnerability_mapping)

    # for file, tools in results.items():
    #     print(file)

    print("Vulnerability counts:")
    for tool in ['slither', 'mythril']:
        print(f"\n{tool.capitalize()}:")
        for category, count in sorted(results[tool].items()):
            print(f"  {category}: {count}")
    print("Details: ")
    for tool in vuln_results:
        for category in vuln_results[tool]:
            slither_list = vuln_results[tool][category]['vuln']
            unique_list = list(set(slither_list))
            print(f"vuln_results[{tool}][{category}] = {{'vuln': {unique_list}}}\n")
    # for tool in vuln_results:
    #     for category in vuln_results[tool]:
    #         vuln_name = vuln_results[tool][category]['vuln']
    #         print(f"vuln_results[{tool}][{category}] = {{'vuln': {vuln_name}}}")

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("Usage: python vulnerability_counter.py <vulnerabilities_folder_path>")
        sys.exit(1)
    
    folder_path = sys.argv[1].strip()
    if not os.path.isdir(folder_path):
        print(f"Error: {folder_path} is not a valid directory")
        sys.exit(1)
    
    main(folder_path)
